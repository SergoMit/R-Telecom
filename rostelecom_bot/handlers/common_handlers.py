"""
–ó–¥–µ—Å—å —É–∫–∞–∑–∞–Ω—ã —Ö—ç–Ω–¥–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∑–∞–ø—Ä–æ—Å—ã,
–∏—Å—Ö–æ–¥—è—â–∏–µ –∫–∞–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
import logging
import traceback
import os
import aiofiles
import rostelecom_bot.utils.phrases as phrase
import rostelecom_bot.utils.keyboard as kb
import rostelecom_bot.utils.async_func as af
import rostelecom_bot.logic.crud as crd
import rostelecom_bot.utils.states_obj as st

from aiogram.types.input_file import FSInputFile
from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters.command import Command
from aiogram.enums.content_type import ContentType
from aiogram.filters import StateFilter, BaseFilter
from aiogram.utils.formatting import Text, Bold
from aiogram.fsm.context import FSMContext

from rostelecom_bot.utils.config import file_extension, configuration
from rostelecom_bot.handlers.log_dispatcher import on_error


# –§–∏–ª—å—Ç—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
class DocFilter(BaseFilter):
    def __init__(self, doc_type):
        self.doc_type = doc_type
    
    async def __call__(self, message: types.Message) -> bool:
        return message.content_type == self.doc_type
    

router = Router()


# –ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    content = Text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ",
        Bold(message.from_user.full_name)
    )
    await message.answer(**content.as_kwargs(), reply_markup=ReplyKeyboardRemove())
    await af.clear_admin_id(st.AdminsList.ADMIN_ID)
    await state.set_state(st.AuthStates.USER)
    await message.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —É–∫–∞–∑–∞–Ω –≤ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞")


# –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(st.AuthStates.USER, Command("admin"))
async def switch_to_admin(message: types.Message, state: FSMContext):
    if message.from_user.id in st.AdminsList.ADMIN_ID:
        await message.answer("–í—ã —É–∂–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. \n\r–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", reply_markup=kb.cancel_authorisation)
        await state.set_state(st.AuthStates.wait_pass)


# –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@router.message(st.AuthStates.wait_pass, F.text == '–ü–æ–∫–∏–Ω—É—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é üö™')
async def cancel_authorization(message: types.Message, state: FSMContext):
    await state.set_state(st.AuthStates.USER)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", reply_markup=ReplyKeyboardRemove())


# –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@router.message(st.AuthStates.wait_pass)
async def authorizations(message: types.Message, state: FSMContext):
    if message.text == await af.get_password():
        await message.answer(phrase.greeting_adm, reply_markup=kb.admin_kb)
        await state.set_state(st.AuthStates.ADMIN)
        await af.add_admin_id(st.AdminsList.ADMIN_ID, message.from_user.id)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\
                             \n\r–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∏–Ω—É—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'")


""" –ë–ª–æ–∫ –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""

# –ö–æ–º–∞–Ω–¥–∞, –ø–µ—Ä–µ–≤–æ–¥—è—â–∞—è –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
@router.message(st.AuthStates.ADMIN, F.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –¥–∏—Å–∫ üíæ')
async def admin_command(message: types.Message, state: FSMContext):
    await state.set_state(st.AuthStates.wait_file)
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏.\
                             \n\r–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ xls", reply_markup=kb.cancel_upload_kb)


# –ö–æ–º–∞–Ω–¥–∞, –æ—á–∏—â–∞—é—â–∞—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
@router.message(st.AuthStates.ADMIN, F.text == '–û—á–∏—Å—Ç–∏—Ç—å –¥–∏—Å–∫ üóë')
async def delete_file_cmd(message: types.Message):
    try:
        response = await crd.delete_from_yandex_disk(configuration['DIRECTORY'])
        await message.answer(response)
    except Exception as e:
        await on_error(message, e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.\
                             \n\r–°–≤–µ–¥–µ–Ω–∏—è –æ –Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")


# –ö–æ–º–∞–Ω–¥–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∞—è –ª–æ–≥–∏
@router.message(st.AuthStates.ADMIN, F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ª–æ–≥–∏ üìù")
async def send_log_file(message: types.Message):
    if not os.path.exists(os.path.join(os.getcwd(), 'errors.txt')):
        async with aiofiles.open(str(os.getcwd())+'/errors.txt', "w+") as file:
            await file.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ RT-DataFinder!\n\r")
            
    try:
        document = FSInputFile(os.path.join(os.getcwd(), 'errors.txt'), filename="errors.txt")
        await message.reply_document(document)
    except Exception as e:
        await message.answer(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
        logging.error(traceback.format_exc())
    

# –ö–æ–º–∞–Ω–¥–∞, –æ—á–∏—â–∞—é—â–∞—è –ª–æ–≥–∏
@router.message(st.AuthStates.ADMIN, F.text == "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ üßπ")
async def clear_log_file(message: types.Message):
    try:
        async with aiofiles.open(os.path.join(os.getcwd(), 'errors.txt'), "w") as file:
            await file.write('')
            await file.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ RT-DataFinder!\n\r")
        await message.answer("–õ–æ–≥-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    except Exception:
        logging.error("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞:")
        logging.error(traceback.format_exc())


# –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(st.AuthStates.ADMIN, F.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üßë‚Äçüíª')
async def switch_to_user(message: types.Message, state: FSMContext):
    if message.from_user.id not in st.AdminsList.ADMIN_ID:
        await message.answer("–í—ã —É–∂–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
    else:
        await af.clear_admin_id(st.AdminsList.ADMIN_ID)
        await state.set_state(st.AuthStates.USER)
        await message.answer(phrase.greeting_usr, reply_markup=ReplyKeyboardRemove())

"""–ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""


# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.message(st.AuthStates.wait_file, DocFilter(doc_type=ContentType.DOCUMENT))
async def handle_document(message: types.Message, state: FSMContext):
    name_of_file = str(message.document.file_name)
    name_length = len(name_of_file)

    if name_of_file.endswith(file_extension, 0, name_length):
        try:
            file_id = message.document.file_id
            await crd.async_upload_to_yandex(configuration['DIRECTORY'], file_id, message.document.file_name)
            await state.set_state(st.AuthStates.ADMIN)
            await message.reply("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫!", reply_markup=kb.admin_kb)

        except Exception as e:
            await on_error(message, e)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.\
                                \n\r–°–≤–µ–¥–µ–Ω–∏—è –æ –Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.\
                             \n\r–ö –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xls/.xlsx")


# –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
@router.message(st.AuthStates.wait_file, F.text == '–ü–æ–∫–∏–Ω—É—Ç—å —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ üö™')
async def cancel_upload_file(message: types.Message, state: FSMContext):
    await state.set_state(st.AuthStates.ADMIN)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏", reply_markup=kb.admin_kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
@router.message(st.AuthStates.wait_file)
async def wait_file_interceptor(message: types.Message):
    await message.answer("–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç xls-—Ñ–∞–π–ª.\
                         \n\r–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∏–Ω—É—Ç—å —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏'")


# –§—É–Ω–∫—Ü–∏—è, –≤–∫–ª—é—á—ë–Ω–Ω–∞—è –≤ –º–µ–Ω—é –±–æ—Ç–∞ (–æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è)
@router.message(StateFilter(st.AuthStates.ADMIN, st.AuthStates.USER), Command("get_data"))
async def read_data(message: types.Message, state: FSMContext):
    st.PrevState.previous = await state.get_state()
    await state.set_state(st.Region.select)
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.\
                          \n\r–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–º—è –±–æ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ä–µ–≥–∏–æ–Ω", reply_markup=kb.cancel_get_data)
    await message.answer("@Samanter_bot")


# –§—É–Ω–∫—Ü–∏—è, –≤–∫–ª—é—á—ë–Ω–Ω–∞—è –≤ –º–µ–Ω—é –±–æ—Ç–∞ (–æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è)
@router.message(StateFilter(st.AuthStates.ADMIN, st.AuthStates.USER), Command("check_disk"))
async def check_disk_data(message: types.Message):
    try:
        response = await crd.check_yandex_disk(configuration['DIRECTORY'])
        await message.answer(response)
    except Exception as e:
        await on_error(message ,e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ.\
                             \n\r–°–≤–µ–¥–µ–Ω–∏—è –æ –Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")


# –§—É–Ω–∫—Ü–∏—è, –≤–∫–ª—é—á—ë–Ω–Ω–∞—è –≤ –º–µ–Ω—é –±–æ—Ç–∞ (–æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è)
@router.message(Command("help"))
async def help_function(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == st.AuthStates.ADMIN:
        await message.answer(phrase.adm_phrase)

    elif current_state == st.AuthStates.USER:
        await message.answer(phrase.usr_phrase)

    await message.answer(phrase.phrase_help)


# –§—É–Ω–∫—Ü–∏—è, –≤–∫–ª—é—á—ë–Ω–Ω–∞—è –≤ –º–µ–Ω—é –±–æ—Ç–∞ (–æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è)
@router.message(Command("quit"))
async def quit_function(message: types.Message, state: FSMContext):
    await message.answer(phrase.bye_phrase, reply_markup=ReplyKeyboardRemove())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
@router.message(StateFilter(st.AuthStates.ADMIN, st.AuthStates.USER))
async def signal_interceptor(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞")
